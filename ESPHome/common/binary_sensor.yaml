binary_sensor:
  - platform: template
    name: "Occupied"
    id: b_occupied
    device_class: occupancy
    icon: mdi:calendar-clock
    web_server:
      sorting_weight: 4
    on_press:
      - script.execute: occupied
    on_release:
      - script.execute: not_occupied
    lambda: |-
      std::string start_time = id(index0_start_time).state;
      std::string end_time = id(index0_end_time).state;

      if (start_time == "None" || end_time == "None" || start_time == "Error" || end_time == "Error") {
        return false;
      }

      if (start_time.length() < 5 || end_time.length() < 5) {
        return false;
      }

      auto now = id(esptime).now();
      int current_hour = now.hour;
      int current_minute = now.minute;

      int start_hour = atoi(start_time.substr(0, 2).c_str());
      int start_minute = atoi(start_time.substr(3, 2).c_str());
      int end_hour = atoi(end_time.substr(0, 2).c_str());
      int end_minute = atoi(end_time.substr(3, 2).c_str());

      bool is_after_start = (current_hour > start_hour) || (current_hour == start_hour && current_minute >= start_minute);
      bool is_before_end = (current_hour < end_hour) || (current_hour == end_hour && current_minute <= end_minute);

      return is_after_start && is_before_end;

  - platform: template
    name: "Occupied Soon"
    id: b_occupied_soon
    device_class: occupancy
    icon: mdi:calendar-clock
    web_server:
      sorting_weight: 5
    on_press:
      - script.execute: occupied_soon
    lambda: |-
      std::string start_time = id(index0_start_time).state;

      if (start_time == "None" || start_time == "Error") {
        return false;
      }

      if (start_time.length() < 5) {
        return false;
      }

      auto now = id(esptime).now();
      int current_hour = now.hour;
      int current_minute = now.minute;

      int start_hour = atoi(start_time.substr(0, 2).c_str());
      int start_minute = atoi(start_time.substr(3, 2).c_str());

      int current_total_minutes = current_hour * 60 + current_minute;
      int start_total_minutes = start_hour * 60 + start_minute;

      int minutes_until_start = start_total_minutes - current_total_minutes;

      return minutes_until_start > 0 && minutes_until_start <= 15;